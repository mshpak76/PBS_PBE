// the same as SlimCode_Fixed_ToRecap_Dros.txt but with partial sweep, i.e. terminal freqeuncy < 1.0
// used terminal frequencies in range 0.45-0.55, 0.75-0.85

initialize() {
 initializeTreeSeq();
 initializeMutationRate(0);
 //initializeMutationRate(1.22e-8);
 //initializeMutationType("m1",1.0, "f", 0.0);
// try different selection coefficients here 0.1,0.05,0.02 etc 
// 0.005 or 0.007 for 80%, 0.002 or 0.003,0.004 for 50% ?
// initializeMutationType("m2", 1.0, "f", 0.006);
 initializeMutationType("m2", 1.0, "f", 0.007);
 initializeGenomicElementType("g1", m2, 1.0);
 initializeGenomicElement(g1, 0, 14999);
 initializeRecombinationRate(3.67e-6);
 initializeGeneConversion(0.8515, 518, 1.0);
}

1 early() {defineConstant("simID", getSeed());}
1 early() { sim.addSubpop("p1", 4e+4); }
1 early() { sim.addSubpopSplit("p2", 1e+4, p1); }

2000 early() {
sim.treeSeqOutput("restart_slim_" + simID + ".txt"); 
sim.addSubpopSplit("p3", 2e+4, p2);
p2.setSubpopulationSize(2e+4);
}

2000 late() {
 //sim.outputFull("restart_slim_" + simID + ".txt");
 sim.treeSeqOutput("restart_slim_" + simID + ".txt");
 x = rdunif(1,0,14999);
 target = sample(p3.genomes, 1, replace=F);
 target.addNewDrawnMutation(m2, x);
}

2001:3998 late() {
 m2mut = sim.mutationsOfType(m2);
 freqs = sim.mutationFrequencies(p3, m2mut);
 //print(freqs);
 //tally = sum(sim.substitutions.mutationType == m2);
 if(size(freqs) == 0){
   //print("lost");
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,0,14999);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }	
}

3999 late() {
 m2mut = sim.mutationsOfType(m2);
 freqs = sim.mutationFrequencies(p3,m2mut);
 if(size(freqs) == 0){
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,0,14999);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }
 else{
  //with weaker selection, do 50-60%
  //if(freqs < 0.45 | freqs > 0.55){
  if(freqs < 0.75 | freqs > 0.85){
   print(freqs);
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,0,14999);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }
}
}

4000 late()
{
  sim.deregisterScriptBlock(self);
  sim.treeSeqOutput("ThreePopFix.trees");
  sim.simulationFinished();
}
