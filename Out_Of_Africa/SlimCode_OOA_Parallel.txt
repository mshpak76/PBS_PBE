// simulate Gutenkunst et al 2009 genealogy with migration
// Africa, Europe, China,
// may get "stuck" with small selection coefficients, e.g. s <= 0.01
// alternative approach: allow partial sweeps
// try to avert with p0=0.001 initial beneficial alleles
// migration model from ms

// make mutation beneficial in population 3 s = 0.05-0.1?, neutral s = 0 elsewhere
// migration scaled wrt source population size

// p1 = Africa, p2 = Europe, p3 = China
// make p2, Europe the focal population

// introduce BGS by sampling

// multiple all pop sizes by bval


initialize() {
 initializeTreeSeq();
 initializeMutationRate(0);
 //initializeMutationRate(1.22e-8);
 //initializeMutationType("m1",1.0, "f", 0.0);
 initializeMutationType("m2", 1.0, "f", 0.03);
 initializeMutationType("m1", 1.0, "f", 0.03);
 initializeMutationType("m3", 1.0, "f", 0.03);
 initializeGenomicElementType("g1", m2, 1.0);
 initializeGenomicElement(g1, 0, 99999);
 initializeRecombinationRate(7.04e-8);
 initializeGeneConversion(0.838, 100, 1.0);
 Bvals = c(0.4145932, 0.4447721, 0.4747853, 0.5050735, 0.5343682, 0.5646864, 0.5948979, 0.6247126, 0.6544159, 0.6849211, 0.7148560, 0.7450127, 0.7751756, 0.8053146, 0.8351195, 0.8650366, 0.8949025, 0.9247594, 0.9546144, 0.9872088);
 Bval_Freq = c(0.01239254, 0.02456442, 0.03853131, 0.05426460, 0.07071475, 0.08913901, 0.11009095, 0.13321839, 0.16011891, 0.18961042, 0.22439077, 0.26000370, 0.30348732, 0.35492159, 0.41352148, 0.48974020, 0.58184641, 0.69745901, 0.83316061, 1.00000000);
 //check_rand = (float)unifrnd(0,1);
 check_rand = runif(1,0.0,1.0);
 pos = -1;
 do
 {
    pos = pos + 1;
 }
 while (Bval_Freq[pos] < check_rand);
 defineConstant("bval",Bvals[pos]);
}

mutationEffect(m2,p1) {return 1.0;}
mutationEffect(m2,p3) {return 1.0;}
mutationEffect(m3,p1) {return 1.0;}
mutationEffect(m3,p2) {return 1.0;}
mutationEffect(m1,p2) {return 1.0;}
mutationEffect(m1,p3) {return 1.0;}

1 early() {defineConstant("simID", getSeed());}
1 early() { sim.addSubpop("p1", asInteger(12300*bval)); }
1 early() { 
 sim.addSubpopSplit("p2", asInteger(2100*bval), p1);
 p1.setMigrationRates(p2, 2.5e-4);
 p2.setMigrationRates(p1, 2.5e-4);
 //fitness(m2, p2) { return 1.0; }
 //fitness(m2, p1) { return 1.0; }
}

//fitness(m2, p1) { return 1.0; }
//mutationEffect(m2,p1) {return 1.0;}

4752 early() {
 sim.addSubpopSplit("p3", asInteger(510*bval), p2);
 p2.setSubpopulationSize(asInteger(1000*bval));
 p1.setMigrationRates(p2, 3e-5);
 p2.setMigrationRates(p1, 3e-5);
 p3.setMigrationRates(p1, 1.9e-5);
 p1.setMigrationRates(p3, 1.9e-5);
 p3.setMigrationRates(p2, 9.6e-5);
 p3.setMigrationRates(p2, 9.6e-5);
}

4752 late(){
 x2 = rdunif(1,0,99999);
 target2 = sample(p2.genomes, 20, replace=F);
 target2.addNewDrawnMutation(m2,x2);
 x1 = rdunif(1,0,99999);
 target1 = sample(p1.genomes, 246, replace=F);
 target1.addNewDrawnMutation(m1,x1);
 x3 = rdunif(1,0,99999);
 target3 = sample(p3.genomes, 12, replace=F);
 target3.addNewDrawnMutation(m3,x3);
 sim.treeSeqOutput("restart_slim_" + simID + ".txt");
}



4753:5598 late(){
 newSize2 = asInteger(p2.individualCount * 1.004);
 p2.setSubpopulationSize(newSize2);
 newSize3 = asInteger(p2.individualCount * 1.0055);
 p3.setSubpopulationSize(newSize3);
 m2mut = sim.mutationsOfType(m2);
 m1mut = sim.mutationsOfType(m1);
 m3mut = sim.mutationsOfType(m3);
 freq2 = sim.mutationFrequencies(p2,m2mut);
 freq3 = sim.mutationFrequencies(p3,m3mut);
 freq1 = sim.mutationFrequencies(p1,m1mut);
 //print(freqs);
 tally = sum(sim.substitutions.mutationType == m2);
 if(size(freq2) != 1 | size(freq3)!=1 | size(freq1) !=1){
   //print("lost");
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
 }	
}


5599 late() {
 newSize2 = asInteger(p2.individualCount * 1.004);
 p2.setSubpopulationSize(newSize2);
 newSize3 = asInteger(p2.individualCount * 1.0055);
 p3.setSubpopulationSize(newSize3);
 m2mut = sim.mutationsOfType(m2);
 m1mut = sim.mutationsOfType(m1);
 m3mut = sim.mutationsOfType(m3);
 freq2 = sim.mutationFrequencies(p2,m2mut);
 freq3 = sim.mutationFrequencies(p3,m3mut);
 freq1 = sim.mutationFrequencies(p1,m1mut);
 if(size(freq2) != 1 | size(freq3)!=1 | size(freq1) !=1){
   //print("lost");
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
 }
 else{
  if(freq2 < 0.95 & freq3 < 0.95 & freq1 < 0.95){
  //if(freqs < 0.95){
   print(freq2);
   print(freq3);
   print(freq1);
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
 }
}
}
5600 late()
{
  //sim.deregisterScriptBlock(self);
  community.deregisterScriptBlock(self);
  writeFile("Bval.txt",asString(bval));
  sim.treeSeqOutput("OutOfAfrica_Parallel.trees");
  sim.simulationFinished();
}

