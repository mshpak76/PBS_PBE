// this version runs and restarts until fixation occurs
// may get "stuck" with small selection coefficients, e.g. s <= 0.01
// alternative approach: allow partial sweeps
// try to avert with p0=0.001 initial beneficial alleles

// make mutation beneficial in population 3 s = 0.05, neutral s = 0 elsewhere
// migration scaled wrt source population size, symmetric so that Nm=1


initialize() {
 initializeTreeSeq();
 initializeMutationRate(0);
 //initializeMutationRate(1.22e-8);
 //initializeMutationType("m1",1.0, "f", 0.0);
 initializeMutationType("m2", 1.0, "f", 0.05);
 initializeGenomicElementType("g1", m2, 1.0);
 initializeGenomicElement(g1, 0, 99999);
 initializeRecombinationRate(7.04e-8);
 initializeGeneConversion(0.838, 100, 1.0);
}

1 early() {defineConstant("simID", getSeed());}
1 early() { sim.addSubpop("p1", 2e+4); }
1 early() { 
sim.addSubpopSplit("p2", 5e+3, p1);
p1.setMigrationRates(p2, 5e-5);
p2.setMigrationRates(p1, 2e-4);
}

fitness(m2, p2) { return 1.0; }
fitness(m2, p1) { return 1.0; } 
// sweep mutation neutral in populations 1,2

3500 early() {
sim.treeSeqOutput("restart_slim_" + simID + ".txt"); 
sim.addSubpopSplit("p3", 1e+4, p2);
p2.setSubpopulationSize(1e+4);
//p1.setMigrationRates(c(p2,p3), c(5e-4,5e-4));
//p2.setMigrationRates(c(p1,p3), c(1e-3,1e-3));
//p3.setMigrationRates(c(p1,p2), c(1e-3,1e-3));
p1.setMigrationRates(p2, 5e-5);
p1.setMigrationRates(p3, 5e-5);
p2.setMigrationRates(p1, 1e-4);
p2.setMigrationRates(p3, 1e-4);
p3.setMigrationRates(p2, 1e-4);
p3.setMigrationRates(p1, 1e-4);
}

3500 late() {
 //sim.outputFull("restart_slim_" + simID + ".txt");
 sim.treeSeqOutput("restart_slim_" + simID + ".txt");
 x = rdunif(1,0,99999);
 target = sample(p3.genomes, 1, replace=F);
 target.addNewDrawnMutation(m2, x);
}

3501:4998 late() {
 m2mut = sim.mutationsOfType(m2);
 freqs = sim.mutationFrequencies(p3, m2mut);
 //print(freqs);
 tally = sum(sim.substitutions.mutationType == m2);
 if(size(freqs) == 0){
   //print("lost");
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,0,99999);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }	
}

4999 late() {
 m2mut = sim.mutationsOfType(m2);
 freqs = sim.mutationFrequencies(p3,m2mut);
 if(size(freqs) == 0){
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,0,99999);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }
 else{
  if(freqs < 0.95){
   print(freqs);
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,0,99999);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }
}
}

5000 late()
{
  sim.deregisterScriptBlock(self);
  sim.treeSeqOutput("ThreePopFixMigration.trees");
  sim.simulationFinished();
}
