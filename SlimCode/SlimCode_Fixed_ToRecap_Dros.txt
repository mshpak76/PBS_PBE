//50X rather than 100X change

// this version runs and restarts until fixation occurs
// may get "stuck" with small selection coefficients
// alternative approach: allow partial sweeps
// try to avert with p0=0.001 initial beneficial alleles
// use initial counts of 200 and 400 to simulate soft sweeps
// 50x population size rescaling (50x reduction of N, increase of s to maintain desired Ns

initialize() {
 initializeTreeSeq();
 initializeMutationRate(0);
 //initializeMutationRate(1.22e-8);
 //initializeMutationType("m1",1.0, "f", 0.0);
 //initializeMutationType("m2", 1.0, "f", 0.25);
 //initializeMutationType("m2", 1.0, "f", 0.5);
 //initializeMutationType("m2", 1.0, "f", 0.25);
 initializeMutationType("m2", 1.0, "f", 0.05);
 initializeGenomicElementType("g1", m2, 1.0);
 initializeGenomicElement(g1, 0, 14999);
 initializeRecombinationRate(3.67e-6);
 // tract length 518 too long, see longest length that works
 initializeGeneConversion(0.8515, 518, 1.0);
}

1 early() {defineConstant("simID", getSeed());}
1 early() { sim.addSubpop("p1", 4e+4); }
1 early() { sim.addSubpopSplit("p2", 1e+4, p1); }

2000 early() {
sim.treeSeqOutput("restart_slim_" + simID + ".txt"); 
sim.addSubpopSplit("p3", 2e+4, p2);
p2.setSubpopulationSize(2e+4);
}

2000 late() {
 //sim.outputFull("restart_slim_" + simID + ".txt");
 sim.treeSeqOutput("restart_slim_" + simID + ".txt");
 x = rdunif(1,4999,9999);
 //target = sample(p3.genomes, 10, replace=F);
 target = sample(p3.genomes, 1, replace=F);
 target.addNewDrawnMutation(m2, x);
}

2001:3998 late() {
 m2mut = sim.mutationsOfType(m2);
 freqs = sim.mutationFrequencies(p3, m2mut);
 //print(freqs);
 //tally = sum(sim.substitutions.mutationType == m2);
 if(size(freqs) == 0){
   //print("lost");
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,4999,9999);
   //target = sample(p3.genomes, 10, replace=F);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }	
}

3999 late() {
 m2mut = sim.mutationsOfType(m2);
 freqs = sim.mutationFrequencies(p3,m2mut);
 if(size(freqs) == 0){
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,4999,9999);
   //target = sample(p3.genomes, 10, replace=F);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }
 else{
  if(freqs < 0.9999){
   print(freqs);
   sim.readFromPopulationFile("restart_slim_" + simID + ".txt");
   setSeed(rdunif(1, 0, asInteger(2^62) - 1));
   x = rdunif(1,4999,9999);
   //target = sample(p3.genomes, 10, replace=F);
   target = sample(p3.genomes, 1, replace=F);
   target.addNewDrawnMutation(m2, x);
 }
}
}

4000 late()
{
  sim.deregisterScriptBlock(self);
  sim.treeSeqOutput("ThreePopFix.trees");
  sim.simulationFinished();
}
